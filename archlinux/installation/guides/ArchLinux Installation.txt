Linux Install/Setup Designer v1.3
Created: 2020-09-30
Modified: 2020-10-18
2020-10-26

############################
# Linux Setup Architecture #
############################

# A full (design/blueprint) documentation of the setup procedure for Linux Distro Installation as well as the following
"""
- Bootloaders
- Swap
	- Partition	# Not necessary in ArchLinux; can be replaced with swapfile
	- File
- Desktop Environment
	- KDE (Plasma)
	- GNOME
	- FXCE
	- LXCE
- Window Manager
	- Sway
	- DWM
	- QTile
- Customization
"""
Storage Device Type: 
Storage Device Size: 
Bootloader: 
Swap partition?: 
Desktop Environment: 

# Partition Design
row_id, partition_name, partition_type, partition_size, partition_mount, bootable
""" What partition you want to use for your distro?
Recommended configs:
[1]
1, boot, fat32/ext4, 1024M, /boot, *						# 1024MB (if parted - 1024MiB, 1GiB)
2, swap, /swap, 8192M, /swap							# Unnecessary if ArchLinux - recommended to use Swap file
3, root/mount, ext4, <according-to-your-need>, /root
4, home, ext4, <remaining - set all your other partitions first>, /home
"""

# Profile Design
""" Profile Design Setup for use in the OS
	TEMPLATE
root password: <Password for root>
hostname: <device host name>
user name: <Admin user>
user password: <password for admin user>
Region: <your_region>
Keyboard Layout: <your keyboard layout (US, DE etc) default: US>
"""
root password: 
hostname: 
user name: 
user password: 
Region: 
Keyboard Layout: 


######################
# Installation Steps #
######################

# Primarily for ArchLinux, Gentoo 
# (Those that require netinstalls)

#### ArchLinux ####

## Setup ##

# Optional adjustments
# Set keyboard layout - default is US
ls /usr/share/kbd/keymaps/**/*.map.gz
loadkeys <key-layout>

# Verify if system is (UEFI) EFI or (Legacy) MBR
ls /sys/firmware/efi/efivars

# Update system clock
timedatectl set-ntp true

## Partitioning ##

# MBR (dos) does not necessarily need a /boot partition (/dev/sdX1)
# EFI (gpt) requires a efi system partition (/mnt/boot or /mnt/efi) in (/dev/sdX1)
	- Type: EFI System partition
	- Size: 260-512MB or 1GB (1024MB)

[MBR]
# [Terminal "All-in-one"] command line installation using parted
# Initialize Partition Table 
# (NOTE: - this will actually delete all your date; please refer to your architecture designs above as reference)
parted /dev/sdX mklabel msdos			# Partition Table; /dev/sdX where X = device number

# Create Boot Partition
# Create a <Primary> partition with type "ext4" of size <start to end size>; 
# example: 1GB = parted /dev/sdX mkpart primary ext4 1MiB (1GiB/1024MiB)
parted /dev/sdX mkpart primary ext4 <starting size> <end size>
# Make boot partition bootable
parted /dev/sdX set 1 boot on			# Enable Bootable for Boot Partition

# Create Mount/Root Partition
# The starting partition size is the same partition size as the ending size of the previous partition
# example: Given the above partition (Boot partition) is 1GiB; the starting size is 1GiB
# example: 50GB = parted /dev/sdX mkpart primary ext4 (1GiB/1024MiB) (50GiB/51200MiB)
parted /dev/sdX mkpart primary ext4 <ending size of previous partition> <end size>

# Create Home Partition
# IF this is the last partition you plan on creating - you can choose to use up all remaining space in the disk by putting 100%
# As before, The starting partition size is the same partition size as the ending size of the previous partition
# example: Given the above partition (Mount/Root partition) is (50GiB/51200MiB); the starting size is (50GiB/51200MiB)
# example: Remainder = parted /dev/sdX mkpart primary ext4 (50GiB/51200MiB) 100%
parted /dev/sdX mkpart primary ext4 50G 100%	# Use Remainder of the space

# Format Partitions
# Boot partition
mkfs.ext4 /dev/sdX1	# ext4 
# Mount/Root Partition
mkfs.ext4 /dev/sdX2
# Home Partition
mkfs.ext4 /dev/sdX3


[UEFI]
# Note: UEFI does not use primary, logical and extended - it uses a Label system (aka Naming)
# [Terminal "All-in-one"] command line installation using parted
# Initialize Partition Table 
# (NOTE: - this will actually delete all your date; please refer to your architecture designs above as reference)
parted /dev/sdX mklabel gpt			# Partition Table; /dev/sdX where X = device number

# Create Boot Partition
# Create a Boot partition with type "ext4" of size <start to end size>; 
# example: 1GB = parted /dev/sdX mkpart "Boot" "EFI System Partition" 1MiB (1GiB/1024MiB)
parted /dev/sdX mkpart "Boot" "EFI System Partition" <starting size> <end size>
# Make boot partition bootable
parted /dev/sdX set 1 boot on			# Enable Bootable for Boot Partition

# Create Mount/Root Partition
# The starting partition size is the same partition size as the ending size of the previous partition
# example: Given the above partition (Boot partition) is 1GiB; the starting size is 1GiB
# example: 50GB = parted /dev/sdX mkpart "Root Partition" ext4 (1GiB/1024MiB) (50GiB/51200MiB)
parted /dev/sdX mkpart "Root Partition" ext4 <ending size of previous partition> <end size>

# Create Home Partition
# IF this is the last partition you plan on creating - you can choose to use up all remaining space in the disk by putting 100%
# As before, The starting partition size is the same partition size as the ending size of the previous partition
# example: Given the above partition (Mount/Root partition) is (50GiB/51200MiB); the starting size is (50GiB/51200MiB)
# example: Remainder = parted /dev/sdX mkpart "Home Partition" ext4 (50GiB/51200MiB) 100%
parted /dev/sdX mkpart "Home Partition" ext4 50G 100%	# Use Remainder of the space

# Format Partitions
# Boot partition
mkfs.fat -F32 	/dev/sdX1	# fat32
# Mount/Root Partition
mkfs.ext4 	/dev/sdX2
# Home Partition
mkfs.ext4 	/dev/sdX3

# Using fdisk

[MBR]

[UEFI]

## Mounting ##
# using the above partition example (/dev/sdX1 - /dev/sdX3)
# Mount Root/Mount partition to /dev/sdX2
mount /dev/sdX2 /mnt
# Make & Mount Boot partition to /dev/sdX1
mkdir (-p) /mnt/boot
	# (Legacy) MBR
		mount /dev/sdX1 /mnt/boot
	# (UEFI) EFI
		mkdir (-p) /mnt/boot/EFI
		mount /dev/sdX1 /mnt/boot/EFI
# Make & Mount Home partition to /dev/sdX3
mkdir (-p) /mnt/home
mount /dev/sdX3 /mnt/home

## Pacstrapping and Setting up ArchLinux kernel ##
# Optional
# Select a mirror for downloading your packages
""" NOTE
In the list - scroll down to your preferred mirror (The closer to your location the better)
- Copy the line
- Scroll backup and paste at the top of the list
- Save
- Update pacman
	sudo pacman -Sy
"""
nano /etc/pacman.d/mirrorlist
sudo pacman -Sy

# Strap libraries to /mnt (ArchLinux Kernel etc.)
""" Strap the following packages to /mnt
pacstrap -i /mnt <packages>
example: pacstrap -i /mnt base base-devel linux linux-firmware linux-headers linux-lts linux-lts-headers sudo nano dhcpcd wireless_tools wpa_supplicant wpa_actiond dialog netctl
"""
# NOTES: These are the minimal for installations
pacstrap /mnt base base-devel linux linux-lts linux-firmware linux-headers linux-lts-headers sudo <text editor> <networking (optional)>

# Generate an fstab file
""" Use -U or -L to define by UUID or Labels respectively
-U : Define by UUID
-L : Define by Labels
Output and Append to /mnt/etc/fstab
"""
genfstab -U /mnt >> /mnt/etc/fstab

# Change root to Arch Mount/Root
arch-chroot /mnt

## Work in ArchLinux system mount/root ##

# Optional 
# Update pacman
pacman -Syu

# Set timezone
""" NOTE: You have to do some research here in the sense of going into the directory and checking for your country
To search: ls /usr/share/zoneinfo/<your-region>/<your-city>
i.e. region is Asia and your country/city is Singapore
	/usr/share/zoneinfo/Asia/Singapore
"""
ln -sf /usr/share/zoneinfo/<Region>/<City> /etc/localtime

# Sync and Generate /etc/adjtime using hwclock
""" Sync your clock using hwclock
--systohc : System to Hardware Clock
--utc	  : Sync to Universal Coordinated Time
"""
hwclock --systohc

# Edit Locale
""" Uncomment your locale
Example: 
	If US: Remove en_US.UTF-8 UTF-8
	If SG: Remove en_SG.UTF-8 UTF-8
"""
nano /etc/locale.gen
OR
# Uncomment locale
sed -i '/en_SG.UTF-8/s/^#//g' /etc/locale.gen

# Generate locale
locale-gen

# Create Locale Cnfig
""" Input your locale from above into <your_locale>
i.e. If US: <your_locale>=en_US.UTF-8
"""
echo "LANG=<your_locale>" >> /etc/locale.conf

# (OPTIONAL)
# Set keyboard layout from the start, make changes persistent in vconsole.conf
echo "KEYMAP=<key-layout>" >> /etc/vconsole.conf

# Optional
# Configure package manager
""" You can configure your package manager by adding under the "Repositories" section
Recommendations:
1. If you are on a 64-bit machine, uncomment the [multilib] repository - this lets you install both 64-bit and 32-bit programs
	[multilib] Include = /etc/pacman.d/mirrorlist
	- Useful (Possibly even required) for Steam
"""
nano /etc/pacman.conf
# Uncomment [multilib]
OR
# uncomment [multilib]
# We can use this to match a range by patterns. We can then match the # at the beginning of each line and remove it.
# Reference: https://stackoverflow.com/questions/34515193/sed-pacman-conf-remove-for-multilib-include
# Google search: Bash how to uncomment /etc/pacman.conf multilib, https://www.google.com/search?client=firefox-b-d&q=Bash+how+to+uncomment+%2Fetc%2Fpacman.conf+multilib
sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

## Host Management ##

# Create Hostname
""" Create a hostname for your Distro (in /etc/hostname) """
echo "your-hostname" >> /etc/hostname

# Create Hosts for Network
""" Edit /etc/hosts and append the following into the list
127.0.0.1	localhost
::1		localhost
127.0.1.1	<your-hostname-above>.localdomain	<your-hostname-above>
NOTE: If your system has a permanent IP address (static), use that static IP instead of 127.0.1.1
"""
echo "127.0.0.1	localhost" >> /etc/hosts
echo "::1	localhost" >> /etc/hosts # 7 empty spaces to localhost
echo "127.0.1.1	<your-hostname-above>.localdomain	<your-hostname-above>" >> /etc/hosts

# Initialize and create new ram file system
mkinitcpio -P linux
mkinitcpio -P linux-lts

# Set Root Password
""" Set Password for root admin
"""
passwd

# Allow new users to run sudo
""" edit sudoers file to allow sudo
To allow your new user to run sudo by editing your sudoers file
	- Scroll down until you find the line
		%wheel ALL=(ALL) ALL
	- uncomment it
	- This allows all members of the <wheel> group to use sudo
"""
EDITOR=<your-editor> visudo && <save>
OR
# uncomment "%wheel ALL=(ALL) ALL"
sed -i '/%wheel ALL=(ALL) ALL/s/^#//g' /etc/sudoers # Allow new users to run sudo; PLEASE DO NOT USE SCRIPTS TO EDIT SUDOERS, use [EDITOR=<your editor> visudo]

## Bootloader Management ##
# NOTE:
# Before proceeding, please ensure to note your device number (/dev/sdX)

# Install Bootloader

[GRUB]
# Install GRUB and OS-Prober
pacman -S grub os-prober
	[MBR]
	cd /boot
	mkdir grub
	cd grub
	grub-mkconfig -o grub.cfg
	# Install grub to the device (it will save the files in the boot partition)
	# Replace /dev/sdX with your devie disk where X = a,b,c ... 
	grub-install --target=i386-pc --debug /dev/sdX

	[UEFI]
	# Required for UEFI
	pacman -S efibootmgr dosfstools mtools
	# Install grub to the device's EFI Boot partition
	grub-install --target=x86_64-efi --efi-directory=grub_uefi --bootloader-id=GRUB --recheck --debug
	grub-mkconfig -o /boot/grub/grub.cfg

[Syslinux]


## Finalization ##

exit
umount -l /mnt
reboot


###########################
# Post-Installation Guide #
###########################
[Home Directory]
# Dotfiles
"""
~
	.archive
	.logs
"""
# Dotfiles
DOTFLDRS=(~/.archive ~/.logs)
for fldrs in ${DOTFLDRS[@]}; do
	mkdir -p $fldrs
done

1. Install AUR (without a AUR helper)
# NOTE:
#	Before you can build packages in arch - requires base-devel
git clone https://aur.archlinux.org/yay-git.git # clone yay repository from aur
cd yay-git
makepkg -si 					# Make and Install Arch Package
yay 						# To use yay AUR manager to install stuff from the AUR

[For build, make, configure - App Development]
# Essential Packages:
build-devel : For make

[User Control]
# Create Admin user
""" You should immediately create a user that acts as a admin
Syntax:
	useradd -m -G <groups (multiple)> -d <alternate-home-directory> <username>
	useradd -m -g <group (singular)> -d <alternate-home-directory> <username>
"""
Example [1] Bare Minimum: useradd -m -G wheel -d /home/<username> <username>
# Set Admin user password
passwd <username>
<insert password here>
# Test if user can login
sudo su - <username>
whoami
# To change password
passwd <username>
# To delete a user
userdel <username>

[Networking]
# Install Networking Packages
"""
If you want to log:
	mkdir ~/.logs
	sudo pacman -S dhcpcd wireless_tools wpa_supplicant wpa_actiond dialog netctl | tee -a ~/.logs/installpkgs.log
"""
sudo pacman -S dhcpcd wireless_tools wpa_supplicant wpa_actiond dialog netctl


# Setup Network - Wired 
## using Systemctl (systemd)
# Ensure these packages are installed
#	dhcpcd
# To enable Wired networking on startup
systemctl enable dhcpcd@eth0.service
# To start Wired networking
systemctl start dhcpcd@eth0.service
# To disable Wired networking on startup
systemctl disable dhcpcd@eth0.service
# To stop Wired networking
systemctl stop dhcpcd@eth0.service

## NetworkManager
"""
# Ensure these packages are installed
	networkmanager
"""
# To enable Wired networking on startup
sudo NetworkManager enable
# To start Wired networking
sudo NetworkManager start
# To disable Wired networking on startup
sudo NetworkManager disable
# To stop Wired networking
sudo NetworkManager stop

# Setup Network - Wireless
# Ensure these packages are installed
#	wireless_tools, wpa_supplicant, wpa_actiond, dialog, netctl
#	pacman -S wireless_tools wpa_supplicant wpa_actiond dialog netctl
# To connect to a wifi
wifi-menu
# To Enable Wireless service on boot [Method 1]
systemctl enable net-auto-wireless.service
# To Disable Wireless service on boot [Method 1]
systemctl disable net-auto-wireless.service
# To Start Wireless service on boot [Method 1]
systemctl start net-auto-wireless.service
# To Stop Wireless service on boot [Method 1]
systemctl stop net-auto-wireless.service
# To Enable Wireless service on boot [Method 2]
netctl list			# Note the profile of choice
netctl enable <profile-name> 	# Enable the profile to start on boot
 
[Important Utilities]
# Install File Manager
konsole
# Install Terminal Emulator
dolphin
# Install Web Browser
firefox
# Install Text Editor
kate
sudo pacman -S "file-manager" "terminal-emulator" "web-browser" "text-editor"

[Setup AUR]
# Install AUR Helper
# AUR: yay
1. Install AUR (without a AUR helper)
# NOTE:
#	Before you can build packages in arch - requires base-devel
git clone https://aur.archlinux.org/yay-git.git # clone yay repository from aur
cd yay-git
makepkg -si 					# Make and Install Arch Package
yay 						# To use yay AUR manager to install stuff from the AUR

[MicroCodes]
""" 
Intel : intel-ucode
AMD   : amd-ucode
"""
sudo pacman -S intel-ucode amd-ucode

[System]
# Install and Setup Graphics
""" Use X Window System
Packages: xorg-server xorg-xinit xorg-server-utils
"""
sudo pacman -S xorg-server xorg-xinit xorg-server-utils

# Audio control
""" 2 Audio:
alsa		: alsa-utils
PulseAudio	: pulseaudio pulseaudio-alsa
"""
pacman -S pulseaudio pulseaudio-alsa

# 3D-support
""" Requires mesa """
sudo pacman -S mesa

# NVIDIA Support
""" Requires 
Packages: nvidia lib32-nvidia-utils
"""
sudo pacman -S nvidia lib32-nvidia-utils

# Laptop support
""" Drivers
Trackpad Drivers: xf86-input-synaptics
"""
sudo pacman -S xf86-input-synaptics

# Install Fonts
""" Some recommended fonts: ttf-dejavu """
sudo pacman -S ttf-dejavu

# Window Manager
# Default WM
""" 
Default Environment packages: xorg-twm xorg-xclock xterm
"""
# Install Packages
sudo pacman -S xorg-twm xorg-xclock xterm
# Test Environment
startx

# WM Managment
""" Types of Window Managers
OpenBox
i3 (i3-gaps)
Awesome
Deepin
Sway (Wayland-based i3)
DWM (Dynamic Window Manager) by Suckless
"""
	[OpenBox]
	sudo pacman -S openbox
	[i3]
	sudo pacman -S i3
	[Awesome]
	sudo pacman -S awesome
	[Deepin]
	sudo pacman -S deepin
	[Sway]
	sudo pacman -S swaywm
	[dwm]
	git clone [dwm url]
	
# Desktop Environment
""" Types of Desktop Environments:
GNOME
KDE
XFCE
LXDE
Cinnamon
Mate
"""
	[Gnome]
	sudo pacman -S gnome
	[KDE (Plasma)]
	sudo pacman -S xorg plasma plasma-wayland-session kde-applications
	[XFCE]
	sudo pacman -S xfce4
	[Cinnamon]
	sudo pacman -S cinnamon
	[Mate]
	sudo pacman -S mate
	[LXDE]
	sudo pacman -S lxde

# To launch the window manager / Desktop Environment automatically 
# NOTE: This is to automatically use the GUI (DE)/WM of choice to go in (if this is your only DE/WM installed)
# Use Display Managers if you have more than 1 (Refer Below)
# create file of initiation for GUI
# echo "(gui of choice)" >> ~/.xinitrc
	[Desktop Environments]
	echo "exec gnome-session" >> ~/.xinitrc	# To automatically use gnome to go in (if this is your only DE/WM installed)
	startx
	echo "exec plasma" >> ~/.xinitrc	# To automatically use KDE Plasma to go in (if this is your only DE/WM installed)
	startx
	echo "exec startxfce4" >> ~/.xinitrc	# To automatically use XFCE(4) to go in (if this is your only DE/WM installed)
	startx
	echo "exec cinnamon-session" >> ~/.xinitrc # To automatically use cinnamon to go in (if this is your only DE/WM installed)
	startx
	echo "exec mate-session" >> ~/.xinitrc # To automatically use mate to go in (if this is your only DE/WM installed)
	startx
	echo "exec startdde" >> ~/.xinitrc # To automatically use LXDE to go in (if this is your only DE/WM installed)
	startx
	[Window Managers]
	echo "exec openbox-session" >> ~/.xinitrc
	startx
	echo "exec i3" >> ~/.xinitrc
	startx
	echo "exec awesome" >> ~/.xinitrc
	startx
	echo "exec startdde" >> ~/.xinitrc
	startx

# Display Managers
""" Display Managers aka Login managers are used to validate credentials as well as to act as a Hub for users
to decide on what Window Manager/Desktop Environments they would like to use.
Types of Display Managers
gdm	(Gnome)
sddm 	(KDE Plasma)
lightDM

Usage: sudo systemctl {enable|disable|start|stop} <display-manager>.service
"""
# Install Display Manager
sudo pacman -S gdm	[GNOME - gdm]
sudo pacman -S sddm	[KDE Plasma - sddm]
sudo pacman -S lightdm 	[LightDM]
# Setup Summary
GNOME: sudo systemctl {enable|disable|start|stop} gdm.service
KDE  : sudo systemctl {enable|disable|start|stop} sddm.service
lightDM : sudo systemctl {enable|disable|start|stop} lightdm.service
# Enable after installation
# Allow this service to autostart on boot
GNOME: sudo systemctl enable gdm.service
KDE  : sudo systemctl enable sddm.service
lightDM : sudo systemctl enable lightdm.service
# Disable after installation
# Disable and Stop this service from autostart on boot
GNOME: sudo systemctl disable gdm.service
KDE  : sudo systemctl disable sddm.service
lightDM : sudo systemctl disable lightdm.service
# Start Display Manager
GNOME: sudo systemctl start gdm.service
KDE  : sudo systemctl start sddm.service
lightDM : sudo systemctl start lightdm.service
# Stop Display Manager
GNOME: sudo systemctl stop gdm.service
KDE  : sudo systemctl stop sddm.service
lightDM : sudo systemctl stop lightdm.service

[File Manager capabilities]
""" To perform capabilities such as Remote network connections (smb, ftp etc), Mounting removable media and Trash
Require package: 
	(Gnome Virtual File System)
	gvfs  	   : for Trash, Mounting removable media
	gvfs-samba : for Remote network connections (smb, ftp etc.)
"""
sudo pacman -S gvfs gvfs-samba

#######################################
# Post-Installation Software Download #
#######################################
[Version/Source Control]
# git
sudo pacman -S git

[Ricing (TBC)]
# Rofi : A menu launcher alternative to dmenu
	Install Rofi
# Polybar : Unique status bar alternative to i3bar
	Install Polybar
# Conky : A popular system information display
	Install Conky
# Pywal : https://github.com/dylanaraps/pywal
	For customization and automatically changing colorschemes
	Install python-pywal
	sudo pacman -S python-pywal

[Gaming]
# Steam (Beta)
	Install Steam
		- Join and Activate Steam Beta
		- Activate Steam Proton
# Lutris
	Install Lutris

[Screen Recorder]
# OBS Studio
	Install OBS

[Communication]
Whatsapp Desktop
Telegram Desktop
Discord Desktop

[Media]
Audio Visual Analyzer
Music Player
Spotify Desktop

[Compilers]
Android Studio: For Android Development

[Open-Source software]
calcurse: A unique calender/todo list program

[File Managers]
Dolphin (KDE)
Thunar (XFCE)
Ranger (Vim-based Terminal File Manager)

[Terminal Emulators]
Alacritty
urxvt
st (Suckless/Simple Terminal)

[Office Suites]
"""
libreoffice - Fresh & Still
 Fresh: Up to date, rolling release
 Still: Safe, tested release
"""
pacman -S libreoffice-fresh

[FOSS Github repos]
surf - suckless minimal web browser
Zathura - pdf reader

[Study Utilities]
pandoc  - Presentation pdf maker; a great document converter
 	- NOTE: Requires TexLive (Group: texlive-most)

[Status Bars]
slstatus : Suckless status
	git clone https://git.suckless.org/slstatus
polybar : Unique status bar alternative to i3bar

################
# Ricing Guide #
################

[Window Managers (WM)]
""" For Types of Window Managers
- please refer to [Notes, Guides and Extras] under [Environments] 
"""
# Recommended Packages
# Polybar : Window Manager Bar
# Rofi	  : A 
# Conky   : A 
# Picom   : A compositor; previously named "Compton"

[Desktop Environments (DE)] 
""" For Types of Desktop Environments 
- please refer to [Notes, Guides and Extras] under [Environments] 
"""

[Fonts]
""" Download fonts
create and place inside folder ~/.local/share/fonts
"""
sudo pacman -S ttf-font-awesome ttf-jetbrains-mono
# using AUR
1. Install AUR (without a AUR helper)
# NOTE:
#	Before you can build packages in arch - requires base-devel
git clone https://aur.archlinux.org/yay-git.git # clone yay repository from aur
cd yay-git
makepkg -si 					# Make and Install Arch Package
yay 						# To use yay AUR manager to install stuff from the AUR
## AUR Packages
yay -S ttf-material-design-icons

[Wallpapers]
# Static images
""" Packages:
nitrogen
feh
"""
feh
	feh --bg-scale /path/to/wallpaper/image.jpg

# Animated wallpapers (gif)
""" Packages:
xwinwrap     : github.com/ujjwal96/xwinwrap
feh-wallpaper: github.com/thomas10-10/foo-Wallpaper-Feh-Gif
sxiv (Simple Image Viewer) : 
"""
xwinwrap
	# Requires dependencies: gifview
	xwinwrap -g <scale> -ni -s -nf -b -un -argb -sh circle -- gifview -w WID /path/to/gif/image.gif -a
	where:
		<scale> : 1920x1080; 600x600 etc.
feh-wallpaper
	killall back4.sh
	/path/to/script/back4.sh <speed> /path/to/gif/image.gif

sxiv : Simple Image Viewer


[XResources]
# Generate ~/.xResources
if [ ! -f ~/.Xresources ]; then
	# Not found
	xrdb -query | tee -a ~/.Xresources
fi

[(Terminal) Colorscheme ricing]
# Resources
# R1. A colorscheme picker: terminal.sexy
# 1. Ensure that you have .Xresources file (refer to [XResources] above)
# 2. Ensure that you have your terminal config
	[Alacritty]
	~/.config/alacritty/alacritty.xml
# 3. IF you are using terminal.sexy
	3.1. Export the colorscheme to your terminal format (i.e. to alacritty)
# 4. Edit your terminal config file with the colorscheme layout
	Copy and paste from the generated export text file to the config file

Summary: you make the theme with terminal.sexy or you can choose one of the many that are already there. Then you export it to your terminal config
 You will then see the correct "language" for your terminal. Paste that in the config file and your new colors will shine

Notes:
 N1: typically you can reference ~/.Xresources for your colorscheme so you do not need to manually edit the relevant config files

############################
# Notes, Guides and Extras #
############################
[Essentials]
# Essential packages
base base-devel linux linux-headers linux-firmware linux-lts linux-lts-headers grub os-prober <text-editor>

# References:
DistroTube - Arch Linux Installation Guide 2020
	https://www.youtube.com/watch?v=PQgyW10xD8s

# Useful Utilities
youtube-dl  : A video downloader (not locked to youtube)
 - youtube-dlc : A fork of youtube-dl for python https://youtube-dl-sources.org/
ffmpeg      : Multi-purpose tool for conversion
gifski      : A useful video to gif converter
ImageMagick : A essential tool for picture/video management - ability to convert file types; scaling etc.
OBS Studio  : A Cross-OS screen recording software

[Readers]
# PDF
Zathura

[Documents]
pandoc 

[Partition and Formatting]
# To get your devices
	1. sudo fdisk -l
	2. lsblk
# File systems
fat32
ext2
ext4
linux-swap

# To format the respective file systems
types : Formatting
fat32 : mkfs.fat -F32 <your-device>
ext2  : mkfs.ext2 <your-device>
ext4  : mkfs.ext4 <your-device>
linux-swap  : mkswap <your-device>; swapon <your-device>

[Swap Partition]
# usually is in 2nd partition (/dev/sdX2)
parted /dev/sdX mkpart primary linux-swap <starting size> <end size>
mkswap /dev/sdX2
swapon /dev/sdX2

[Swapfile]
# Make swap file
# Create swap file
	1. fallocate -l <size of swap file> /swapfile
	2. sudo dd if=/dev/zero of=/swapfile bs=<size of swap file> status=progress
# Change Modifier/permission to 600
sudo chmod 600 /swapfile
# Format/Make the swap file
sudo mkswap /swapfile
# Turn the swap on
sudo swapon /swapfile
# Add swap file entry into fstab (file system table) fle
echo "#swapfile >> /etc/fstab
echo "/swapfile swap swap defaults 0 0" >> sudo nano /etc/fstab
# Verify swap file
sudo free -h

# To Remove the swapfile
# Deactivate swap file
sudo swapoff -v /swapfile
# Remove swap file
sudo rm (-f) /swapfile
# Remove swap file entry in fstab (file system table) file
sudo nano /etc/fstab

# Modifying swap file
# Deactivate swap file
sudo swapoff -v /swapfile
# Remove/Delete old swap file
sudo rm (-f) /swapfile
# Create (new) swap file
	1. fallocate -l <size of swap file> /swapfile
	2. sudo dd if=/dev/zero of=/swapfile bs=<size of swap file> status=progress
# Change Modifier/permission to 600
sudo chmod 600 /swapfile
# Format/Make the swap file
sudo mkswap /swapfile
# Turn the swap on
sudo swapon /swapfile
# Add swap file entry into fstab (file system table) fle
echo "#swapfile >> /etc/fstab
echo "/swapfile swap swap defaults 0 0" >> sudo nano /etc/fstab
# Verify swap file
sudo free -h

[Environments]
# Desktop Environments
""" Types of Desktop Environments
GNOME
KDE
XFCE
LXDE
Cinnamon
Mate
"""

# Window Managers
""" Types of Window Managers:
OpenBox
i3 (i3-gaps)
Awesome
Deepin
DWM (Dynamic Window Manager) by Suckless
(more to be added)
"""

# Display Managers
# Types of Display Managers:
gdm	(Gnome)
sddm 	(KDE Plasma)
lightDM
Usage: sudo systemctl {enable|disable|start|stop} <display-manager>.service

# To update bootloader
## Grub
"""
Environment Variables:
 GRUB_THEMES : Theme for the grub bootloader; i.e. Kali Linux has a custom theme
 GRUB_WALLPAPER : Wallpaper that appears on startup; 
"""
To update the grub after use, 
on Debian-based:
	update-grub
on Arch-based:
	sudo grub-mkconfig -o /boot/grub/grub.cfg
	or
	in bash: alias update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg"

# Recovery
## Core files
"""
- You can recover core files from the archlinux installer iso
- Mount your partitions
"""
cp /etc/<corefile> /mnt/etc/<corefile>
Example: cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
	 cp /etc/pacman.conf /mnt/etc/pacman.conf